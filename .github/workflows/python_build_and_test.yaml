name: Build & Test Python application

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.12.0]
    defaults:
      run:
        working-directory: "src"
    steps:

      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: debug cwd
        run: ls -lrtha
        
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache dependencies
        id: cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pip
            .venv
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip

      - name: Install Dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          python -m pip install --upgrade pip
          python -m venv .venv
          source .venv/bin/activate
          pip install -r requirements.txt

      - name: Run code lint
        run: |
          python -m pip install pylint
          pylint $(git ls-files '*.py') --exit-zero

  test:
    runs-on: ubuntu-latest
    needs: build
    strategy:
      matrix:
        python-version: [3.12.0]
    defaults:
      run:
        working-directory: "src"
    outputs:
      coverage_file: ${{ steps.get-test-coverage-file-path.outputs.coverage_file }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: debug cwd
        run: ls -lrtha

      - name: Use Cached Dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pip
            .venv
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}

      - name: Run tests and coverage
        run: |
          source .venv/bin/activate
          python manage.py test
          coverage run manage.py test
          coverage xml -o coverage.xml
          coverage html -d coverage/

      - id: get-test-coverage-file-path
        run: echo "coverage_file=coverage.xml" >> "$GITHUB_ENV"

      - name: Print test coverage file name
        run: echo "${{ steps.get-test-coverage-file-path.outputs.coverage_file }}"

      - name: Upload test coverage
        uses: actions/upload-artifact@v2
        with:
          name: coverage-results
          path: |
            coverage/
            coverage.xml
        if: ${{ always() }}

  sonarqube:
    runs-on: ubuntu-latest
    needs: [build, test]
    strategy:
      matrix:
        python-version: [3.12.0]
    defaults:
      run:
        working-directory: "src"
    steps:

      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: debug cwd
        run: ls -lrtha

      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@master
        continue-on-error: true
        env:
          SONAR_TOKEN: ${{ secrets.SONARQUBE_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONARQUBE_URL }}
        with:
          args: -X

      - name: SonarQube Quality Gate check
        id: sonarqube-quality-gate-check
        continue-on-error: true
        uses: sonarsource/sonarqube-quality-gate-action@master
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONARQUBE_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONARQUBE_URL }}

      - name: SonarQube Quality Gate Status value
        continue-on-error: true
        run: echo "The Quality Gate status is ${{ steps.sonarqube-quality-gate-check.outputs.quality-gate-status }}"